#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'syclink'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/syclink` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/syclink now"
  exit 64
end

include GLI::App
include SycLink::Infrastructure
include SycLink::Formatter

# Commands that need to have a website and a designer object
WEBSITE_COMMANDS = [ :create, :link, :file, :update, :delete, :list, :find,
                     :dir, :mf, :gc, :ie, :csv, :merge, :check ]

# syclink's configuration directory
syclink_directory             = File.expand_path("~/.syc/syclink")
# syclink's configuration file
@syclink_file                  = File.join(syclink_directory, "syclink.rc")
# syclink's template directory
syclink_template_directory    = File.join(syclink_directory, "templates/")
# syclink's html template"
syclink_html_template         = File.join(syclink_template_directory, 
                                          "syclink.html.erb")
# syclink's website directory
syclink_website_directory     = File.join(syclink_directory, "website/")
# syclink's html directory
syclink_html_directory        = File.join(syclink_directory, "html/")
# syclink's stylesheet directory
syclink_stylesheets_directory = File.join(syclink_html_directory, 
                                          "stylesheets/")

create_directory_if_missing(syclink_directory)

create_directory_if_missing(syclink_template_directory)
copy_file_if_missing(File.join(File.dirname(__FILE__), 
                               '../templates/syclink.html.erb'),
                     syclink_template_directory)

create_directory_if_missing(syclink_website_directory)

create_directory_if_missing(syclink_html_directory)

create_directory_if_missing(syclink_stylesheets_directory)
copy_file_if_missing(File.join(File.dirname(__FILE__), 
                               '../templates/stylesheets/style.css'), 
                     syclink_stylesheets_directory)
copy_file_if_missing(File.join(File.dirname(__FILE__), 
                               '../templates/stylesheets/style.css.scss'),
                     syclink_stylesheets_directory)

config = load_config(@syclink_file)

program_desc 'Create a link-list and display it as an html page'

version SycLink::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Website to operate on'
arg_name 'WEBSITE'
flag [:w,:website]

desc 'Add a link from command line or links from a file to the website'
command :add do |c|

  c.desc 'Add a link from the command line to the website'
  c.arg_name 'URL'
  c.command :link do |s|
    s.desc 'Name of the link'
    s.arg_name 'NAME'
    s.flag [:n, :name]

    s.desc 'Description of the link'
    s.arg_name 'DESCRIPTION'
    s.flag [:d, :description]

    s.desc 'Tag the link is associated to'
    s.arg_name 'TAG'
    s.flag [:t, :tag]

    s.action do |global_options,options,args|

      @designer.add_link(args[0], options)

    end
  end

  c.desc 'Add links from a file to the website'
  c.arg_name 'FILE'
  c.command :file do |s|

    s.action do |global_options,options,args|

      @designer.add_links_from_file(args[0])

    end
  end
end

desc 'Update a link from command line or links from file'
command :update do |c|

  c.desc 'Update a link from the command line'
  c.arg_name 'URL'
  c.command :link do |s|

    s.desc 'Name of the link'
    s.arg_name 'NAME'
    s.flag [:n, :name]

    s.desc 'Description of the link'
    s.arg_name 'DESCRIPTION'
    s.flag [:d, :description]

    s.desc 'Tag the link is associated to'
    s.arg_name 'TAG'
    s.flag [:t, :tag]

    s.action do |global_options,options,args|

      @designer.update_link(args[0], options)

    end
  end

  c.desc "Update links by reading from file"
  c.arg_name 'FILE'
  c.command :file do |s|

    s.action do |global_options,options,args|

      @designer.update_links_from_file(args[0])

    end

  end
end

desc 'Merge links with same URL'
command :merge do |c|
  c.action do |global_options,options,args|
    @designer.merge_links
  end
end

desc 'Find a link'
arg_name 'FIND_STRING'
command :find do |c|

  c.desc 'Table columns to print'
  c.default_value 'url, name, description, tag'
  c.arg_name 'URL, NAME, DESCRIPTION, TAG'
  c.flag [:c, :columns]

  c.desc 'Table width'
  c.arg_name 'WIDTH'
  c.flag [:w, :width], :type => Integer

  c.desc 'Expand table to full width of specified WIDTH'
  c.default_value true
  c.switch [:e, :expand]

  c.action do |global_options,options,args|

    if args[0].nil?
      STDERR.puts "Warning: You need to specify a FIND_STRING"
      STDERR.puts "If you want to list all links use 'syclink list'"
    else
      print_links(@designer.find_links(args[0]), options[:c], options)
    end

  end
end

desc 'Remove links from command line or from a file'
command :delete do |c|

  c.desc 'Remove one or more links'
  c.arg_name 'URL [URL URL]'
  c.command :link do |s|
    s.action do |global_options,options,args|
      @designer.remove_links(args)
    end
  end

  c.desc 'Remove links read from a file'
  c.arg_name 'FILE'
  c.command :file do |s|
    s.action do |global_options,options,args|
      @designer.remove_links_from_file(args[0])
    end
  end

end

desc 'List and optionally filter links'
command :list do |c|

  c.desc 'Link\'s URL'
  c.arg_name 'URL'
  c.flag [:u, :url]

  c.desc 'Name of the link'
  c.arg_name 'NAME'
  c.flag [:n, :name]

  c.desc 'Description of the link'
  c.arg_name 'DESCRIPTION'
  c.flag [:d, :description]

  c.desc 'Tag the link is associated to'
  c.arg_name 'TAG'
  c.flag [:t, :tag]

  c.desc 'Table columns to print'
  c.default_value 'url, name, description, tag'
  c.arg_name 'URL, NAME, DESCRIPTION, TAG'
  c.flag [:c, :columns]

  c.desc 'Table width'
  c.arg_name 'WIDTH'
  c.flag [:w, :width], :type => Integer

  c.desc 'Expand table to full width of specified WIDTH'
  c.default_value true
  c.switch [:e, :expand]

  c.action do |global_options,options,args|
    
    print_links(@designer.list_links(options), options[:c], options)

  end
end

desc "Operate on websites"
command :website do |c|
  c.desc 'Show all websites or search for websites with indication of default'
  c.arg_name 'WEBSITE'
  c.skips_pre
  c.skips_post
  c.command :show do |s|

    s.desc 'Show only the exactly matching website'
    s.switch [:e, :exact]

    s.action do |global_options,options,args|
      websites = if options[:e]
        Dir.glob(yaml_file(syclink_website_directory, args[0]))
      else
        Dir.glob(File.join(syclink_website_directory, "*.website"))
      end
      
      websites.each do |f|
          if File.basename(f) =~ /#{config[:default_website]}\.website/
            puts "[default] #{f}" 
          else
            puts "          #{f}"
        end
      end
    end
  end

  c.desc 'Check the availability of the links and show report'
  c.command :check do |s|

    s.desc 'Report available links'
    s.default_value false
    s.switch [:a, :available]
    
    s.desc 'Report unavailable links'
    s.default_value true
    s.switch [:u, :unavailable]

    s.desc 'Columns to print'
    s.default_value 'url,response'
    s.arg_name 'URL,RESPONSE'
    s.flag [:c, :columns]

    s.desc 'Print in table format'
    s.default_value false
    s.switch [:t, :table]

    s.desc 'Table width (only with table switch)'
    s.arg_name 'WIDTH'
    s.flag [:w, :width], :type => Integer

    s.desc 'Expand table to full specified WIDTH (only with table switch)'
    s.default_value true
    s.switch [:e, :expand]

    s.action do |global_options,options,args|
      print_availability_result(@designer.report_links_availability(options),
                                options)
    end
  end

  c.desc 'Remove one or more websites'
  c.arg_name 'WEBSITE_PATTERN'
  c.skips_pre
  c.skips_post
  c.command :remove do |s|
    s.action do |global_options,options,args|
      websites = Dir.glob(File.join(syclink_website_directory, 
                                    "#{args[0]}.website"))
      html_files = Dir.glob(File.join(syclink_html_directory, 
                                      "#{args[0]}.html"))
      puts "About to delete:"
      puts; puts "Websites"
      puts "--------"
      puts websites
      puts; puts "HTML-Files"
      puts "----------"
      puts html_files
      puts; print "Delete websites and corresponding html files (y/n)? "
      if STDIN.gets.chomp =~ /y/i
        websites.each { |website| FileUtils.rm website }
        html_files.each { |html_file| FileUtils.rm html_file }
      end
    end
  end
  
  c.desc 'Create html representation of website'
  c.command [:create] do |s|
    s.action do |global_options,options,args|
      @designer.create_website(syclink_html_directory, syclink_html_template)
    end
  end

  c.default_command :create
end

desc "Import links from Firefox, Chrome, Internet Explorer or directory"
command :import do |c|

  c.desc 'Import links from Mozilla Firefox'
  c.arg_name 'PATH_TO_FIREFOX_DATABASE'
  c.command :mf do |s|

    s.action do |global_options,options,args|
      unless File.exists? args[0]
        STDERR.puts <<-HERE.gsub(/^ {10}/, '')
          Error: #{args[0]} doesn't exist!
          Firefox stores its bookmarks in a SQLite3 database called
          places.sqlite. With Ubuntu this database is usually located in
          '~/.mozilla/firefox/*.default/places.sqlite'. 
          If you are on Windows
          the file is located in the user's home directory 
          '~/AppData/Roaming/Mozilla/Profiles/*.default/places.sqlite'.
        HERE
        exit(0)
      else
        @designer.import_links(SycLink::Firefox.new(args.shift))
      end
    end
  end

  c.desc 'Import links from Google Chrome'
  c.arg_name 'PATH_TO_CHROME_BOOKMARKS'
  c.command :gc do |s|

    s.action do |global_options,options,args|
      unless File.exists? args[0]
        STDERR.puts <<-HERE.gsub(/^ {10}/, '')
          Error: #{args[0]} doesn't exist!
          Google Chrome stores its bookmarks in a JSON file called
          Bookmarks. With Ubuntu this file is usually located in
          '~/.config/chromium/Default/Bookmarks'. 
          If you are on Windows
          the file is located in the user's home directory 
          '~/AppData/Local/Google/Chrome/User Data/Bookmarks'.
        HERE
        exit(0)
      else
        @designer.import_links(SycLink::Chrome.new(args.shift))
      end
    end
  end

  c.desc 'Import links from Internet Explorer'
  c.arg_name 'PATH_TO_INTERNET_EXPLORER_BOOKMARKS'
  c.command :ie do |s|

    s.desc 'Number of tags to consider'
    s.long_desc <<-HERE.gsub(/^ {6}/, '')
      Each parent directory starting at the PATH_TO_INTERNET_EXPLORER_BOOKMARKS
      is considered a tag. If no level flag is specified all tags are imported.
      Otherwise only the count of tags are imported that are specified by the
      level flag. A level of 0 will import no tags.
    HERE
    s.arg_name 'LEVEL 0..N'
    s.flag [:l, :level], :type => Integer

    s.desc 'Tags to set for all imported links'
    s.arg_name 'TAG[,TAG,TAG]'
    s.flag [:t, :tags]

    s.action do |global_options,options,args|
      unless File.exists? args[0]
        STDERR.puts <<-HERE.gsub(/^ {10}/, '')
          Error: #{args[0]} doesn't exist!
          Internet Explorer stores its bookmarks in a directory structure.
          the bookmarks are located in the user's home directory 
          '~/AppData/Favorites'.
        HERE
        exit(0)
      else
        @designer.import_links(SycLink::InternetExplorer.new(args.shift,
                                                             options))
      end
    end
  end

  c.desc 'Import links from a Directory'
  c.long_desc <<-HERE.gsub(/^ {4}/, '')
    The PATH_TO_DIRECTORY can have patterns that allows to import specific
    files.

    Examples:

    PATH_TO_DIRECTORY/**/*.pdf will import all pdf-files in the directories and
    sub-directory

    PATH_TO_DIRECTORY/**/* will import all files and sub-directories
  HERE

  c.arg_name 'PATH_TO_DIRECTORY'
  c.command :dir do |s|

    s.desc 'Number of tags to consider'
    s.long_desc <<-HERE.gsub(/^ {6}/, '')
      Each parent directory starting at the PATH_TO_DIRECTORY is considered a 
      tag. If no level flag is specified all tags are imported. Otherwise only 
      the count of tags are imported that are specified by the level flag. A 
      level of 0 will import no tags.
    HERE
    s.arg_name 'LEVEL 0..N'
    s.flag [:l, :level], :type => Integer

    s.desc 'Tags to set for all imported links'
    s.arg_name 'TAG[,TAG,TAG]'
    s.flag [:t, :tags]

    s.action do |global_options,options,args|
      @designer.import_links(SycLink::FileImporter.new(args.shift,
                                                       options))
    end
  end
end

desc 'Export to csv'
command :export do |c|

  c.desc 'Export links to csv'
  c.command :csv do |s|

    s.action do |global_options,options,args|
      puts @designer.export(:csv)
    end
  end

end

pre do |global,command,options,args|
  
  if WEBSITE_COMMANDS.include?(command.name)
    @designer = SycLink::Designer.new
    global[:website] ||= config[:default_website]

    if File.exists? yaml_file(syclink_website_directory, global[:website])
      @designer.load_website(yaml_file(syclink_website_directory, 
                                       global[:website]))

      set_default_website(global[:website], config[:default_website])

    else
      print "Website '#{global[:website]}' doesn't exist. Create it (y/n)? "
      if STDIN.gets.chomp =~ /y/i 
        puts; puts "Creating '#{global[:website]}'"
        @designer.new_website(global[:website])
      else
        exit(0)
      end

      set_default_website(global[:website], config[:default_website])
    end
    
  end

  true
end

post do |global,command,options,args|
  if WEBSITE_COMMANDS.include? command.name
    @designer.save_website(syclink_website_directory)
  end
end

on_error do |exception|
  if exception.message == "exit"
    false
  else
    true
  end
end

# If current website and default website are different ask whether current
# website should be set as default website
def set_default_website(current, default)
  if (current != default)
    print "Want to make '#{current}' the default (y/n)? "
    if STDIN.gets.chomp =~ /y/i
      puts; puts "Making '#{current}' the default website"
      File.open(@syclink_file, 'w') do |f| 
        YAML.dump({ default_website: current }, f) 
      end
    end
  end
end

# Print links in table format
def print_links(links, columns, opts = {})
  allowed_cols = %w{ url name description tag } 
  cols = columns.delete(' ').downcase.split(',') & allowed_cols
  cols = allowed_cols if cols.empty?
  SycLink::Formatter.table(links, cols, opts)
end

# Print result of links availability check eather to STDOUT or in a table
# format
def print_availability_result(result, opts)
  if opts[:table]
    allowed_cols = %w{ url response }
    cols = opts[:columns].delete(' ').downcase.split(',') & allowed_cols
    cols = allowed_cols if cols.empty?
    SycLink::Formatter.table_of_array(result, cols, opts)
  else
    result.each { |r| puts r.join(';') }
  end
end

exit run(ARGV)
