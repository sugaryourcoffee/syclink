#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'syclink'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/syclink` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/syclink now"
  exit 64
end

include GLI::App

# syclink's configuration directory
syclink_directory = File.expand_path("~/.syc/syclink")
# syclink's configuration file
syclink_file               = File.join(syclink_directory, "syclink.rc")
# syclink's template directory
syclink_template_directory = File.join(syclink_directory, "templates/")
# syclink's website directory
syclink_website_directory  = File.join(syclink_directory, "website/")
# syclink's stylesheet directory
syclink_stylesheets_directory = File.join(syclink_website_directory, 
                                          "stylesheets/")

unless File.exists? syclink_directory
  Dir.mkdir syclink_directory
end

unless File.exists? syclink_template_directory
  Dir.mkdir syclink_template_directory
  FileUtils.cp File.join(File.dirname(__FILE__),
                         '../templates/syclink.html.erb'), 
               syclink_template_directory
end


unless File.exists? syclink_website_directory
  Dir.mkdir syclink_website_directory
end

unless File.exists? syclink_stylesheets_directory
  Dir.mkdir syclink_stylesheets_directory
  FileUtils.cp File.join(File.dirname(__FILE__),
                         '../templates/stylesheets/style.css.scss'),
               syclink_stylesheets_directory
end

unless File.exists? syclink_file
  FileUtils.touch syclink_file
else
  config = YAML.load_file(syclink_file)
end

program_desc 'Create a link list and display it as an html page'

version SycLink::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Add a link to the website'
arg_name 'LINK | LINK_FILE'
command :add do |c|
  c.desc 'Read links from CSV file'
  c.switch [:f, :file]

  c.desc 'Name of the link'
  c.arg_name 'NAME'
  c.default_value 'default'
  c.flag [:n, :name]

  c.desc 'Description of the link'
  c.arg_name 'DESCRIPTION'
  c.default_value ''
  c.flag [:d, :description]

  c.desc 'Tag the link is associated to'
  c.arg_name 'TAG'
  c.default_value 'General'
  c.flag [:t, :tag]

  c.action do |global_options,options,args|

    p global_options
    p options
    p args
    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "add command ran"
  end
end

desc 'Describe update here'
arg_name 'Describe arguments to update here'
command :update do |c|
  c.action do |global_options,options,args|
    puts "update command ran"
  end
end

desc 'Describe delete here'
arg_name 'Describe arguments to delete here'
command :delete do |c|
  c.action do |global_options,options,args|
    puts "delete command ran"
  end
end

desc 'Describe list here'
arg_name 'Describe arguments to list here'
command :list do |c|
  c.action do |global_options,options,args|
    puts "list command ran"
  end
end

desc 'Describe search here'
arg_name 'Describe arguments to search here'
command :search do |c|
  c.action do |global_options,options,args|
    puts "search command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
