#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'syclink'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/syclink` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/syclink now"
  exit 64
end

include GLI::App
include SycLink::Infrastructure
include SycLink::Formatter

# syclink's configuration directory
syclink_directory             = File.expand_path("~/.syc/syclink")
# syclink's configuration file
syclink_file                  = File.join(syclink_directory, "syclink.rc")
# syclink's template directory
syclink_template_directory    = File.join(syclink_directory, "templates/")
# syclink's website directory
syclink_website_directory     = File.join(syclink_directory, "website/")
# syclink's html directory
syclink_html_directory        = File.join(syclink_directory, "html/")
# syclink's stylesheet directory
syclink_stylesheets_directory = File.join(syclink_html_directory, 
                                          "stylesheets/")

unless File.exists? syclink_directory
  Dir.mkdir syclink_directory
end

unless File.exists? syclink_template_directory
  Dir.mkdir syclink_template_directory
  FileUtils.cp File.join(File.dirname(__FILE__),
                         '../templates/syclink.html.erb'), 
               syclink_template_directory
end


unless File.exists? syclink_website_directory
  Dir.mkdir syclink_website_directory
end

unless File.exists? syclink_html_directory
  Dir.mkdir syclink_html_directory
end

unless File.exists? syclink_stylesheets_directory
  Dir.mkdir syclink_stylesheets_directory
  FileUtils.cp File.join(File.dirname(__FILE__),
                         '../templates/stylesheets/style.css.scss'),
               syclink_stylesheets_directory
end

unless File.exists? syclink_file
  File.open(syclink_file, 'w') { |f| YAML.dump({ }, f) }
else
  config = YAML.load_file(syclink_file)
end

program_desc 'Create a link list and display it as an html page'

version SycLink::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Website to operate on'
default_value 'the default'
arg_name 'WEBSITE'
flag [:w,:website]

desc 'Add a link to the website'
arg_name 'URL'
command :add do |c|

  c.desc 'Name of the link'
  c.arg_name 'NAME'
  c.flag [:n, :name]

  c.desc 'Description of the link'
  c.arg_name 'DESCRIPTION'
  c.flag [:d, :description]

  c.desc 'Tag the link is associated to'
  c.arg_name 'TAG'
  c.flag [:t, :tag]

  c.action do |global_options,options,args|

    @designer.add_link(args[0], options)

  end
end

desc 'Add links from a file to the website'
arg_name 'FILE'
command :file do |c|

  c.action do |global_options,options,args|

    @designer.add_links_from_file(args[0])

  end
end

desc 'Update a link'
arg_name 'URL'
command :update do |c|

  c.desc 'Name of the link'
  c.arg_name 'NAME'
  c.flag [:n, :name]

  c.desc 'Description of the link'
  c.arg_name 'DESCRIPTION'
  c.flag [:d, :description]

  c.desc 'Tag the link is associated to'
  c.arg_name 'TAG'
  c.flag [:t, :tag]

  c.action do |global_options,options,args|

    @designer.update_link(args[0], options)

  end
end

desc 'Remove a link'
arg_name 'URL'
command :delete do |c|
  c.action do |global_options,options,args|
    puts "delete command ran"
  end
end

desc 'Invoke a link'
arg_name 'URL'
command :list do |c|
  c.action do |global_options,options,args|
    puts "list command ran"
  end
end

desc 'List and optionally filter links'
command :list do |c|

  c.desc 'Link\'s URL'
  c.arg_name 'URL'
  c.flag [:u, :url]

  c.desc 'Name of the link'
  c.arg_name 'NAME'
  c.flag [:n, :name]

  c.desc 'Description of the link'
  c.arg_name 'DESCRIPTION'
  c.flag [:d, :description]

  c.desc 'Tag the link is associated to'
  c.arg_name 'TAG'
  c.flag [:t, :tag]

  c.desc 'Table columns to print'
  c.default_value 'url, name, description, tag'
  c.arg_name 'URL, NAME, DESCRIPTION, TAG'
  c.flag [:c, :columns]

  c.action do |global_options,options,args|
    
    allowed_cols = %w{ url name description tag } 
    cols = options[:c].delete(' ').downcase.split(',') & allowed_cols
    SycLink::Formatter.table(@designer.list_links(options), cols)

  end
end

desc "Operate on websites"
command :website do |c|
  c.desc 'list all websites or search for websites'
  c.command :list do |s|
    s.action do |global_options,options,args|
    end
  end

  c.desc 'Create new website'
  c.command :add do |s|
    s.action do |global_options,options,args|
    end
  end

  c.desc 'Set default website to operate on'
  c.command :default do |s|
    s.action do |global_options,options,args|
    end
  end

  c.desc 'Remove website'
  c.command :remove do |s|
    s.action do |global_options,options,args|
    end
  end

  
  c.desc 'Make html representation of website'
  c.command :make do |s|
    s.action do |global_options,options,args|
    end
  end

  c.default_command :make
end

pre do |global,command,options,args|
  @designer = SycLink::Designer.new
  global[:website] ||= config[:default_website]
  help_now! "You need to provide a website name '-w WEBSITE'" if global[:website].nil?

  if File.exists? yaml_file(syclink_website_directory, global[:website])
    @designer.load_website(yaml_file(syclink_website_directory, 
                                     global[:website]))
  else
    @designer.new_website(global[:website])
  end

  puts

  true
end

post do |global,command,options,args|
  @designer.save_website(syclink_website_directory)

  puts
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
